#!/bin/bash
disk="/dev/sda"
ssd=true

# kernel could be any of the ones in official arch repos or
# cachyOS repos
kernel=linux-cachyos
editor=neovim

# microcode override, if left emtpy the script will try to install the correct one automatically
# use this for instance to install both microcode packages for a general system
# options are intel-ucode and amd-ucode
microcode=

randomize_mac=true
bpq=true
zram=true
# time in seconds before grub chooses the boot option
grub_timeout=1
# AUR helper, either aura, paru, or yay, defaults to paru
AUR="paru"

hostname=ComputerName #set hostname before run
# common nomenclature is all lowercase however archlinux doesn't
# # stop you from setting one in caps, make sure it doesn't contain
# # special characters

locale=en_US.UTF-8
keymap=us
# # all US keymaps provided by ArchLinux
# # amiga-us
# # atari-us
# # br-latin1-us
# # is-latin1-us
# # us
# # mac-us
# # sunt5-cz-us
timezone="America/Los-Angeles"

# user info
# usernames can contain only
# lowercase letters (a-z)
# uppercase letters (A-Z)
# digits (0-9)
# underscores (_)
# hyphens (-).

users=("user1" "user2")
adminusers=("user2")
sambagroup=sambashare
sambausers="user1 user2"
# user that will be used for installation of powerpill
export admin="user2"

passwords=(
  "password1"
  "password2"
)

rootpaassword="password"

# corresponds with user
shell=("/bin/bash")

#  "games"   # some software needs this group
#  "adm"             # full read access to journal files
#  "log"             # access to /var/log
#  "systemd-journal" # read only access to systemd logs
#  "ftp"             # acess to ftp server files
#  "http"            # acess to http server files
#  "rfkill"          # turn on and off wifi
#  "sys"             # configure cups without root
#  #"uucp"            # access to serial ports
#  #"lp"              # access to parallel ports
#  "wheel"           # can run any root command with password
#  "libvirt"         # virtual machine
#  "kvm"             # virtual machine
nonadmingroups=("games")
admingroups=("adm" "log" "systemd-journal" "ftp" "http" "rfkill" "sys" "wheel" "libvirt" "kvm")

# laptop, desktop, server
ArchInstallType="laptop"

DE=KDE
# this script allows for the following DEs
# Deepin
# KDE
# KDE-wayland
# Cinnamon
# Mate
# XFCE
# LXQT
# icewm
# i3
# sway

NetworkingBackend=systemd
# either systemd, networkmanager or networkmanagercore
# networkmanager core uses systemdresolvd instead of networkmanager + dhcpcd + dnsmasq

# package overrides, install these packges on top of the ones
# listed in ArchInstallType, leave empty to use default
install_snapper=""
install_security=""
install_optimizations=""
install_compilier_optimizations=""
install_computer_signals=""
install_git=""
install_ssh=""
install_mesa=""
install_video=""
install_video_3d=""
install_video_acceleration=""
install_networking=""
install_wifi=""
install_browser=""
install_bluetooth=""
install_editor=""
install_fstools=""
install_fonts=""
install_KVM=""
install_pdf=""
install_java=""
install_java_management=""
install_java=""
install_java8=""
install_java11=""
install_java17=""
install_javaJDK=""
install_java8JDK=""
install_java11JDK=""
install_java17JDK=""
install_openfonts=""
install_openfontsAUR=""
install_libreoffice=""
install_libreofficeAUR=""
install_nativeMS=""
install_MSfonts=""

jailbreak_admin() {
  echo "Sudoers will temporarly have all permissions without password"
  sed -i 's/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /mnt/etc/sudoers
}

jail_admin() {
  echo "Sudo will now require password for root commands"
  sed -i 's/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /mnt/etc/sudoers
  sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /mnt/etc/sudoers
}

powerpill_command() {
  arch-chroot /mnt /bin/bash -c "powerpill -S --noconfirm --needed $*"
}

# this only kinda works...   it seems if the package asks for a key to be imported, everything falls apart
AUR_command() {
  if [[ $AUR == "yay" ]] || [[ $AUR == "paru" ]]; then
    arch-chroot /mnt su - "$admin" -c "$AUR -S --noconfirm --needed $*"
  elif [[ $AUR == "aura" ]]; then
    arch-chroot /mnt su - "$admin" -c "$AUR -A --noconfirm --needed $*"
  fi
}
