#!/bin/bash
disk="/dev/sda"
# decides if bootup fstrim will be enabled, true or false
# it is recommended for xfs
manualFStrim="false"

# indivitual partition flags, leave empty for default
# Bios Boot, used for legacy boot, default is true
BiosBoot=""
# esp, efi partition, default is true, disable for a legacy install
esp=""
# Auxiliary partition, set below, default is true
Aux=""
# Recovery partition, default is true, it's just the archiso
Recovery=""
# swap, default is true
Swap=""

# the mount point of the aux partition defaults to /home
AuxUse=""

# the mount point of esp, defaults to /boot/efi, new conventions call for /efi
# a few distros use the esp partition as /boot
espMount=""
# the size of the esp partition, is around 256mb , defaults to 2mb, the esp partition will only be used to store the bootloader
EFI=""
# esp format, the script only does fat paritions, set this variable to either 12, 16, or 32
# defaults to 12 because at 2mb nothing else is supported
# size limits
# FAT 12 - 16 mb
# FAT 16 - 2 GB
# FAT 32 - 2 TB
espFormat=""

# reference https://wiki.archlinux.org/title/File_systems
# xfs, f2fs, btrfs, ext4, jfs
# defaults to btrfs
# Grub only supports FAT32, ext4, Btrfs or XFS, thus if you are using f2fs
# the esp partition must be set to at least a size of 256mb, formatted as FAT32, and mounted as /boot
# root file system to be used
rootfs=""
# aux file system to be used
auxfs=""

# kernel could be any of the ones in official arch repos or
# cachyOS repos
kernel=linux-cachyos
editor=neovim

# microcode override, if left emtpy the script will try to install the correct one automatically
# use this for instance to install both microcode packages for a general system
# options are intel-ucode and amd-ucode
microcode=

randomize_mac=true
bpq=true
zram=true
# time in seconds before grub chooses the boot option
grub_timeout=1
# AUR helper, either aura, paru, or yay, defaults to paru
AUR="paru"

hostname=ComputerName #set hostname before run
# common nomenclature is all lowercase however archlinux doesn't
# # stop you from setting one in caps, make sure it doesn't contain
# # special characters

locale=en_US.UTF-8
keymap=us
# # all US keymaps provided by ArchLinux
# # amiga-us
# # atari-us
# # br-latin1-us
# # is-latin1-us
# # us
# # mac-us
# # sunt5-cz-us
timezone="America/Los-Angeles"

# user info
# usernames can contain only
# lowercase letters (a-z)
# uppercase letters (A-Z)
# digits (0-9)
# underscores (_)
# hyphens (-).

# these are arrays, if only one user is wanted just set it as
# users=("user1")
users=("user1" "user2")
adminusers=("user2")
sambagroup=sambashare
sambausers=("user1" "user2")
# user that will be used for installation of powerpill
export admin="user2"

# this is in the order found in users, so user1 would have password1 and user2 would have password2
passwords=(
  "password1"
  "password2"
)

rootpassword="password"

# corresponds with user, having only one will set it such that both use the same
shell=("zsh")

# technically most of these are legacy and you just create a user with wheel if you want root
#  "games"   # some software needs this group
#  "adm"             # full read access to journal files
#  "log"             # access to /var/log
#  "systemd-journal" # read only access to systemd logs
#  "ftp"             # acess to ftp server files
#  "http"            # acess to http server files
#  "rfkill"          # turn on and off wifi
#  "sys"             # configure cups without root
#  #"uucp"            # access to serial ports
#  #"lp"              # access to parallel ports
#  "wheel"           # can run any root command with password
#  "libvirt"         # virtual machine
#  "kvm"             # virtual machine
nonadmingroups=("games")
admingroups=("adm" "log" "systemd-journal" "ftp" "http" "rfkill" "sys" "wheel" "libvirt" "kvm")

# laptop, desktop, server, core
# laptop, enough to boot and go into a DE(you did go down and update the packages needed for your system right?)
# desktop, pretty much just laptop without any of the powersaving things, includes more fonts
# server, nothing related to DEs installed
# core, literally install the bare minimum, used to test out DEs, the following groups:
# security, optimizations, compiler_optimizations, computer_signals
ArchInstallType="laptop"

DE=KDE
# this script allows for the following DEs
# Deepin
# KDE
# KDE-xorg
# Cinnamon
# Cinnamon-noAUR
# Mate
# XFCE
# LXQT
# icewm
# i3
# sway

NetworkingBackend=networkmanager
# either systemd, networkmanager or networkmanagercore
# networkmanager core uses systemdresolvd instead of networkmanager + dhcpcd + dnsmasq

# package overrides, install these packges on top of the ones
# listed in ArchInstallType, leave empty to use default
# snapper must be set true manually for it to be installed and configured
install_snapper=""
install_security=""
install_optimizations=""
install_compilier_optimizations=""
install_computer_signals=""
install_git=""
install_ssh=""
install_mesa=""
install_xorg_drivers=""
install_video_3d=""
install_video_acceleration=""
install_networking=""
install_wifi=""
install_browser=""
install_bluetooth=""
install_editor=""
install_fstools=""
install_fonts=""
install_KVM=""
install_pdf=""
install_java=""
install_java8=""
install_java11=""
install_java17=""
install_javaJDK=""
install_java8JDK=""
install_java11JDK=""
install_java17JDK=""
install_java_management=""
install_openfonts=""
install_openfontsAUR=""
install_libreoffice=""
install_libreofficeAUR=""
install_nativeMS=""
install_MSfonts=""

#   xorg_drivers  -   if you’re nvidia and NOT using propietary drivers:
#                       Install xf86-video-nouveau if you are running a gpu older than Tesla(the mircroarchitecture)
#                       for newers cards(Tesla is ancient(2006-2011) so there is probably no use for this package anymore)
#                 -   if you’re intel and are using gen4 or older hardware(pre core i series) you should use xf86-video-intel
#                       if you are anything newer than that, it’s best to not install xf86-video-intel and use kernel modesetting
#                       with the appropriate mesa package:
#                       if you are gen7(ivybridge) or older use mesa-amber
#                       for all others use the normal mesa, this doesn’t effect amd or nvidia unless you are using
# 		                  something VERY VERY ancient
#                 -   if you’re amd you should be installing xf86-video-amdgpu
#                 -   if you're running an ATI card, install xf86-video-ati
#                 -   VMware needs xf86-input-vmmouse, xf86-video-vmware, open-vm-tools and mesa.
#                       open-vm-tools's related services need to be enabled manually
#                 -   VirtualBox needs virtualbox-guest-utils
#   Video_3d    - For most systems just isntall mesa unless otherwise stated in the other notes
#     Intel     - install mesa-amber and lib32-mesa-amber for intel ivybridge or older intel gpus
#               - install vulkan-intel and lib32-vulkan-intel, vulkan is only supported on haswell and up, ivybridge has partial support
#     AMD       - the only reason to install mesa-amber and lib32-mesa-amber is if you're running a r100 or r220(first and second gen after ATI aquisition)
#               - if you for whatever reason are using propietary AMD drivers, install amdgpu-pro-oglp
#               - for vulkan install vulkan-radeon and lib32-vulkan-radeon unless you run into bugs
#                 amdvlk and lib32-amdvlk generally performs worse
#                 vulkan-amdgpu-pro, lib32-vulkan-amdgpu-pro, vulkan-amdgpu-pro, and lib32-vulkan-amdgpu-pro is the propietary driver
#     Nvidia    - mesa if using nouveau
#                 otherwise install nvidia-utils along with the correct driver for your card:
#                   Turing(16, 20 series and up)            - nvidia-open-dkms
#                   Maxwell(9 series and up)                - nvidia-dkms
#                   Kepler(6, 7, and 8(mobile only) series) - nvidia-470xx-dkms
#                                                             if you are running a kepler card with 11+ gen intel, add ibt=off as a kernel parameter
#                   ----------------------------------------- everything under this will have terrible performance in wayland if an application is running in xwayland
#                   Fermi(4 and 5 series)                   - nvidia-390xx-dkms
#                   Tesla(8000, 9000, 1, 2, 3 series)       - nvidia-340xx-dkms
#                   Currie(6000 and 7000 series)            - please just use nouveau, the drivers are so old they don't work
#                 Mesa doesn't need to be installed, make sure to empty those variables
#
#     NONE      - if you need vulkan and don't have hardware support install vulkan-swrast for software vulkan rendering
#  video-acceleration -
#				INTEL   - older than broadwell(5th gen intel core i) use libva-intel-driver
# 					    - broadwell and up use intel-media-driver
#               - for GMA4500(last gen Core2Duo/first gen i igpu) h264 decoding you’ll want this libva-intel-driver-g45-h264
# 						    do note this gpu is literally so weak it probably isn’t worth it
# 	            - haswell refresh to skylake vp9 decoding or broadwell to skylake hybrid vp8 decoding
#  	              install intel-hybrid-codec-driver
# 				AMD	  - Radeon R300 to HD 2000 install mesa-vdpau
# 					    - Radeon HD 2000 and up install both mesa-vdpau and libva-mesa-driver
#               - if using propietary drivers you also install amf-amdgpu-pro
#      NVIDIA	  - if you’re tesla to Fermi(offically this supports up to kepler v2) just use noveau, there probably isn't anything the propietary driver provides that's worth the bugs
# 					    - install libva-mesa-driver and mesa-vdpau
# 					    - you’ll also need nouveau-fw
# 					    - if you’re using nvidia’s proprietary stuff(you must if you're between Fermi and Turing and want most of the features(vulkan))
#                 install nvidia-utils and lib32-nvidia-utils
#               - for Turing and up(16 and 20 series and up) you can use if you choose to
#               - nvidia-open-dkms
# reference here:         https://wiki.archlinux.org/title/Hardware_video_acceleration
#                         https://wiki.archlinux.org/title/Vulkan
#                         https://wiki.archlinux.org/title/OpenGL
# Pre-AMD ATI cards:      https://wiki.archlinux.org/title/ATI
# OpenSource AMD:         https://wiki.archlinux.org/title/AMDGPU
# Propietary AMD:         https://wiki.archlinux.org/title/AMDGPU_PRO
# OpenSource Nvidia:      https://wiki.archlinux.org/title/Nouveau
# Propietary Nvidia:      https://wiki.archlinux.org/title/NVIDIA
# This script will install all packages regardless of it is in the aur for the variables xorg_drivers, video_3d, or video_acceleration
# if you have decided to use the propietary drivers, this script will not do any of the configuring that might be needed for DRM
#
#  WIFI - if you are using an intel wifi card it may be better to install iw instead of wpa_supplicant
#  browser - firefox-developer-edition vivaldi opera
#  pick your poison for vivaldi and opera you’ll need to also install
#  vivaldi-ffmpeg-codecs or opera-ffmpeg-codecs along with the original package
#  don’t install dns-over-https if you want native normal dns resolving, or do and mask the service
#
#  you don’t HAVE to use networkmanger, if you could live with just iwctl, systemd-resolv + systemd-networkd or connman you do you
#  however most DEs support networkmanager best so it’s the one I setup
#  for systemd leave networking blank
#
#  bluetooth - install both bluez and bluez-utils if you want bluetooth, I am content with using bluetoothctl
#  in terminal however if you want a GUI there’s blueman or blueberry.  Blueberry comes from cinnamon so
#  if you want to choose cinnamon as your DE you don’t need to install either of these, KDE and gnome also
#  come with one installed
#  if office is not desired, empty the variable
general="htop neofetch"
zsh="oh-my-zsh-git zsh-theme-powerlevel10k zsh-autosuggestions zsh-completions zsh-syntax-highlighting"
snapper="grub-btrfs snapper snap-pac snap-sync"
security="apparmor"
optimizations="irqbalance ananicy-cpp chrony logrotate ccache"
computer_signals="tlp"
git="git curl wget rsync"
ssh="dropbear samba"
#mesa="mesa-amber lib32-mesa-amber"
mesa="mesa lib32-mesa"
# xorg_drivers, video_3d, and video_acceleration can contain AUR packages
xorg_drivers=""
# vulkan-mesa-layers lib32-vulkan-mesa-layers is needed if using mesa
# vulkan-icd-loader is needed to run vulkan programs
video_3d="vulkan-intel lib32-vulkan-intel vulkan-mesa-layers lib32-vulkan-mesa-layers vulkan-icd-loader"
video_acceleration="libva-intel-driver"
networking="networkmanager dhcpcd dnsmasq firewalld"
wifi="iwd"
browser="firefox-developer-edition"
bluetooth="bluetooth-support"
editor="neovim"
fstools="gdisk ntfs-3g dosfstools exfatprogs btrfs-progs mtools"
fonts="noto-fonts noto-fonts-cjk ttf-joypixels noto-fonts-extra ttf-ibm-plex"
KVM="qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables-nft libguestfs edk2-ovmf swtpm"
pdf="okular"
# jre
java="jre-openjdk"
java8="jre8-openjdk"
java11="jre11-openjdk"
java17="jre17-openjdk"
# jdk openjfx requires aur
javaJDK="jdk-openjdk java-openjfx"
java8JDK="jdk8-openjdk java8-openjfx"
java11JDK="jdk11-openjdk java11-openjfx"
java17JDK="jdk17-openjdk java17-openjfx"
java_management="java-runtime-common"
openfonts="ttf-caladea ttf-carlito ttf-dejavu ttf-liberation ttf-linux-libertine-g noto-fonts adobe-source-code-pro-fonts adobe-source-sans-fonts adobe-source-serif-fonts"
openfontsAUR="ttf-gentium-basic"
libreoffice="libreoffice-fresh libreoffice-extension-texmaths libreoffice-extension-writer2latex hunspell hunspell-en_us libmythes mythes-en $openfonts $java"
libreofficeAUR="libreoffice-extension-languagetool $java8"
# aur only
nativeMS="fake-ms-fonts"
MSfonts="ttf-ms-fonts ttf-tahoma ttf-vista-fonts"

jailbreak_admin() {
  echo "Sudoers will temporarly have all permissions without password"
  sed -i 's/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /mnt/etc/sudoers
}

jail_admin() {
  echo "Sudo will now require password for root commands"
  sed -i 's/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /mnt/etc/sudoers
  sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /mnt/etc/sudoers
}

powerpill_command() {
  command="powerpill -S --noconfirm --needed $*"
  arch-chroot /mnt /bin/sh -c "$command"
}

# this only kinda works...   it seems if the package asks for a key to be imported, everything falls apart
AUR_command() {
  if [[ $AUR == "yay" ]] || [[ $AUR == "paru" ]]; then
    command="$AUR -S --noconfirm --needed --skipreview $*"
    arch-chroot /mnt su - "$admin" -c "$command"
  elif [[ $AUR == "aura" ]]; then
    command="$AUR -A --noconfirm --needed $*"
    arch-chroot /mnt su - "$admin" -c "$command"
  fi
}

toUpper() {
  local input="$1"
  echo "${input^^}"
}

# SoftSet variable data
# this will set the variable AS LONG AS it empty
SoftSet() {
  # Check if the variable is already set
  echlog "Trying to set $1 to $2"
  if [ -z "$(eval "echo \$$1")" ]; then
    # If it's not set, set it to the second parameter
    echlog "$1 is empty so setting it to $2"
    eval "$1=\"$2\""
  else
    echlog "$1 holds "$(eval "echo \$$1")" won't be set"
  fi
}

# echlog, logs and echos at the same time
# requires logfile variable to be set
# usage:
#        echlog "message"
echlog() {
  local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  # Display the message in the terminal and append it to the file
  echo "$1"
  echo "[$timestamp] $1" >>"$logfile"
}
